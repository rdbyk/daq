<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE MAN SYSTEM "file:///usr/local/lib/scilab-4.1.2/man/manrev.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>DAQ Error Handling</TITLE>
  <TYPE>DAQ Toolbox Functions</TYPE>
  <DATE>20-Dec-2007</DATE>
  <SHORT_DESCRIPTION name="DAQ_Error_Handling">DAQ_Success, DAQ_Failed, DAQ_ErrChk, DAQ_GetExtendedErrorInfo</SHORT_DESCRIPTION>

  <CALLING_SEQUENCE>
    <CALLING_SEQUENCE_ITEM>
    <P>
    [ value ] = DAQ_Success ()
    </P>
    </CALLING_SEQUENCE_ITEM>
    <CALLING_SEQUENCE_ITEM>
    <P>
    [ failed ] = DAQ_Failed ( status )
    </P>
    </CALLING_SEQUENCE_ITEM>
    <CALLING_SEQUENCE_ITEM>
    <P>
    [] = DAQ_ErrChk ( taskHandle, status )
    </P>
    </CALLING_SEQUENCE_ITEM>
    <CALLING_SEQUENCE_ITEM>
    <P>
    [ errorString ] = DAQ_GetExtendedErrorInfo ()
    </P>
    </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>

  <PARAM>
  <PARAM_INDENT>
    
    <PARAM_ITEM>
    <PARAM_NAME>value</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
       : integer
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>
    
    <PARAM_ITEM>
    <PARAM_NAME>failed</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
       : boolean
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>
    
    <PARAM_ITEM>
    <PARAM_NAME>errorString</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
       : string
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>
    
  </PARAM_INDENT>
  </PARAM>
 
  <DESCRIPTION>
     <DESCRIPTION_INDENT>
     <DESCRIPTION_ITEM>
     <P>
     <BD>DAQ_Success</BD> returns a constant value (0), which is returned by
     NI-DAQmx Base functions to indicate successful operation.
     </P>
     <P>
     <BD>DAQ_Failed</BD> can be used to check the <BD>status</BD> of an
     operation. It returns <BD>T</BD> if the operation failed and <BD>F</BD>
     otherwise.
     </P>
     <P>
     <BD>DAQ_ErrChk</BD> checks the <BD>status</BD> of an operation and in case of a
     failure the associated task specified by <BD>taskHandle</BD> is stopped
     and cleared and an apropriate error message is issued (see implementation
     of DAQ_ErrChk in Examples section below).
     </P>
     <P>
     <BD>DAQ_GetExtendedErrorInfo</BD> provides just an interface to
     <BD>DAQmxBaseGetExtendedErrorInfo</BD>.
     </P>
     <P>
     For more detailed information about the interfaced functions,
     please refer to <EM>NI-DAQmx Base 2.x C Function Reference Help</EM>.
     </P>
     </DESCRIPTION_ITEM>
     </DESCRIPTION_INDENT>
  </DESCRIPTION>

  <EXAMPLE><![CDATA[
   // implementation of DAQ_ErrChk
   function [] = DAQ_ErrChk( taskHandle, status )
     if DAQ_Failed( status ) then
       errorString = DAQ_GetExtendedErrorInfo();
         if taskHandle ~= 0 then
           DAQ_StopTask( taskHandle );
           DAQ_ClearTask( taskHandle );
         end
      error( 'DAQmxBase Error: ' + string(status) + ': '...
                                 + errorString, 10000 );
     end
   endfunction
  ]]></EXAMPLE>

  <SEE_ALSO>
    <SEE_ALSO_ITEM> <LINK>DAQ_Constants</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK>DAQ_Task_Configuration_and_Control</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK>DAQ_Channel_Configuration_and_Creation</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK>DAQ_Timing</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK>DAQ_Triggering</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK>DAQ_Read_Functions</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK>DAQ_Write_Functions</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK>DAQ_Buffer_Configuration</LINK> </SEE_ALSO_ITEM>
  </SEE_ALSO>
  
  <AUTHORS>
    <AUTHORS_ITEM label='Dirk Reusch'>
    <P>
    Kybernetik Dr. Reusch (http://www.kybdr.de)
    </P>
    </AUTHORS_ITEM>
  </AUTHORS>
  
  <BIBLIO>
    <SP>
    NI-DAQmx Base 2.x C Function Reference Help
    </SP>
  </BIBLIO>
  
</MAN>

